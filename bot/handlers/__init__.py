import uuid
from io import BytesIO
from urllib.parse import quote

import aiofiles
from aiogram import Router, F, Bot
from aiogram.enums import StickerFormat, StickerType
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, \
    FSInputFile, BufferedInputFile, InputSticker
from aiogram.filters.command import CommandStart
from asgiref.sync import sync_to_async

import config
from panel.models import *

from PIL import Image, ImageFont, ImageDraw
from rembg import remove

router = Router()

LOVEIS_POINTS = ((37, 126), (474, 380))
GAME_POINTS = ((40, 20), (473, 440))
MULT_POINTS = ((37, 44), (474, 380))


@router.callback_query(F.data == 'menu')
@router.message(CommandStart())
async def command_start(message: Message, user: User):
    if isinstance(message, Message):
        await message.delete()
    if isinstance(message, CallbackQuery):
        message = message.message

    text = await Text.objects.aget(name='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

    await message.answer(
        text=text.text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='C—Ç–∏–∫–µ—Ä–ø–∞–∫ –ú—É–ª—å—Ç–ú–µ–º—á–∏–∫–∏', callback_data='mult')],
                [InlineKeyboardButton(text='–°—Ç–∏–∫–µ—Ä–ø–∞–∫ Love is...', callback_data='love')],
                [InlineKeyboardButton(text='–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –ò–≥—Ä–∞ –ø—Ä–∏—Å—Ç–æ–ª–æ–≤ "–ë–∏—Ç–≤–∞ –∑–∞ –∏–≥—Ä—É—à–∫–∏"', callback_data='game')],
                [InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫', callback_data='my')],
            ]
        )
    )


@router.callback_query(F.data.in_({'mult', 'love', 'game'}))
async def on_template_stickers(callback: CallbackQuery, user: User, bot):
    pack = (MultPack, LovePack, GamePack)[['mult', 'love', 'game'].index(callback.data)]
    templates = await sync_to_async(lambda: list(pack.objects.all()))()

    text = await Text.objects.aget(name='–ü—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–µ–±–µ–Ω–∫–∞')
    back_text = await Text.objects.aget(name='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')

    if 'current_n' in user.data:
        await bot.delete_messages(chat_id=user.id, message_ids=user.data['message_ids'])
        current_template = templates[user.data['current_n'] - 1]

        msg = await callback.message.answer_photo(
            photo=FSInputFile(
                path=current_template.template.path) if not current_template.file_id else current_template.file_id,
            caption=text.text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=back_text.text, callback_data='back')]
                ]
            )
        )

        user.data['message_ids'] = [msg.message_id]
        await user.asave()
        return

    up_text = await Text.objects.aget(name='–í—ã—à–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å')

    media_group1 = list()
    for template in templates[:10]:
        media_group1.append(
            InputMediaPhoto(
                media=FSInputFile(path=template.template.path) if not template.file_id else template.file_id)
        )

    media_group2 = list()
    for template in templates[10:]:
        media_group2.append(
            InputMediaPhoto(
                media=FSInputFile(path=template.template.path) if not template.file_id else template.file_id)
        )
    (media_group2 or media_group1)[0].caption = \
        up_text.text.replace(
            '–ù–ê–ó–í–ê–ù–ò–ï –°–¢–ò–ö–ï–†–ü–ê–ö–ê',
            ("–ú—É–ª—å—Ç–ú–µ–º—á–∏–∫–∏", "Love is‚Ä¶", "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤. –ë–∏—Ç–≤–∞ –∑–∞ –∏–≥—Ä—É—à–∫–∏")
            [['mult', 'love', 'game'].index(callback.data)]
        )

    media_group1 = await callback.message.answer_media_group(
        media=media_group1
    )
    user.data['message_ids'] = [msg.message_id for msg in media_group1] + []

    media_group2 = await callback.message.answer_media_group(
        media=media_group2
    )
    user.data['message_ids'].extend([msg.message_id for msg in media_group2])

    full_media_group = media_group1 + media_group2
    for i in range(len(full_media_group)):
        template = templates[i]
        template.file_id = full_media_group[i].photo[-1].file_id
        await template.asave()

    text = await Text.objects.aget(name='–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫')
    text_start = await Text.objects.aget(name='–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ (–ö–Ω–æ–ø–∫–∞ –ù–∞—á–∞—Ç—å)')
    text_back = await Text.objects.aget(name='–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ (–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥)')

    msg = await callback.message.answer(
        text=text.text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=text_start.text, callback_data=callback.data),
                    InlineKeyboardButton(text=text_back.text, callback_data='back'),
                ]
            ]
        )
    )

    user.data['message_ids'].append(msg.message_id)
    user.data['current_template'] = callback.data
    user.data['current_n'] = 1
    await user.asave()


@router.callback_query(F.data == 'back')
async def back(callback: CallbackQuery, user: User, bot: Bot):
    await bot.delete_messages(chat_id=user.id, message_ids=user.data['message_ids'])

    user.data.clear()
    await user.asave()


@router.message(F.document | F.photo)
async def on_photo(message: Message, user: User, bot: Bot):
    msg = await message.answer(
        text='–ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ —Ñ–æ—Ç–æ‚Ä¶\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –º—ã –ø—Ä–∏—à–ª—ë–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.'
    )
    user.data['message_ids'].append(msg.message_id)

    if user.data['current_template'] == 'my':
        await on_my_photo(message, user, bot)
        return

    pack = (MultPack, LovePack, GamePack)[['mult', 'love', 'game'].index(user.data['current_template'])]

    if pack == LovePack:
        points = LOVEIS_POINTS
    elif pack == MultPack:
        points = MULT_POINTS
    elif pack == GamePack:
        points = GAME_POINTS

    width, height = points[1][0] - points[0][0], points[1][1] - points[0][1]

    async with aiofiles.open(
            (await sync_to_async(lambda: pack.objects.all()[user.data['current_n'] - 1])()).template.path,
            'rb') as f:
        template_image = Image.open(BytesIO(await f.read()))

    image = Image.open(
        await bot.download(file=message.document.file_id if message.document else message.photo[-1].file_id)
    )
    result = Image.new('RGBA', template_image.size, (255, 255, 255, 0))

    if image.height / image.width > height / width:
        image = image.resize((width, int(image.height / image.width * width)))
    else:
        image = image.resize((int(image.width / image.height * height), height))

    result.paste(image, points[0])
    result.alpha_composite(template_image)

    result_byte_arr = BytesIO()
    result.save(result_byte_arr, format='PNG')
    result_byte_arr.seek(0)

    await message.delete()

    text_ok = await Text.objects.aget(name='–î–µ–ª–∞–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ (–ö–Ω–æ–ø–∫–∞ –û—Å—Ç–∞–≤–ª—è–µ–º)')
    text_again = await Text.objects.aget(name='–î–µ–ª–∞–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ (–ö–Ω–æ–ø–∫–∞ –ü–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ)')
    text_menu = await Text.objects.aget(name='–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    msg = await message.answer_sticker(
        sticker=BufferedInputFile(file=result_byte_arr.read(), filename='result.png'),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=text_ok.text, callback_data='agree')],
                [InlineKeyboardButton(text=text_again.text, callback_data='disagree')],
                [InlineKeyboardButton(text=text_menu.text, callback_data='back')]
            ]
        )
    )

    user.data['message_ids'].append(msg.message_id)
    await user.asave()


@router.callback_query(F.data == 'agree')
async def agree(callback: CallbackQuery, user: User, bot: Bot):
    if 'sticker_file_ids' in user.data:
        user.data['sticker_file_ids'].append(callback.message.sticker.file_id)
    else:
        user.data['sticker_file_ids'] = [callback.message.sticker.file_id]

    await bot.delete_messages(chat_id=user.id, message_ids=user.data['message_ids'])

    pack = (LovePack, MultPack, GamePack)[['love', 'mult', 'game'].index(user.data['current_template'])]

    if user.data['current_n'] == await sync_to_async(lambda: len(pack.objects.all()))():
        sticker_pack_name = f's{str(uuid.uuid4()).replace('-', '0')}_by_{(await bot.get_me()).username}'

        match user.data['current_template']:
            case 'mult':
                title = '–ú—É–ª—å—Ç–ú–µ–º—á–∏–∫–∏'
                s = await Statistic.objects.aget(name='–°—Ç–∏–∫–µ—Ä–æ–≤ –ú—É–ª—å—Ç–ú–µ–º—á–∏–∫–∏')
                s.value += 1
                await s.asave()
            case 'love':
                title = 'Love is...'
                s = await Statistic.objects.aget(name='–°—Ç–∏–∫–µ—Ä–æ–≤ Love is...')
                s.value += 1
                await s.asave()
            case 'game':
                title = '–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤ –ë–∏—Ç–≤–∞ –∑–∞ –∏–≥—Ä—É—à–∫–∏'
                s = await Statistic.objects.aget(name='–°—Ç–∏–∫–µ—Ä–æ–≤ –ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤')
                s.value += 1
                await s.asave()

        s = await Statistic.objects.aget(name='–°—Ç–∏–∫–µ—Ä–æ–≤ –í—Å–µ–≥–æ')
        s.value += 1
        await s.asave()
        await bot.create_new_sticker_set(
            user_id=user.id,
            name=sticker_pack_name,
            title=title,
            stickers=[
                InputSticker(sticker=file_id, emoji_list=['üåû'], format=StickerFormat.STATIC)
                for file_id in user.data['sticker_file_ids']
            ],
            sticker_type=StickerType.REGULAR,
            sticker_format=StickerFormat.STATIC
        )

        sticker_pack = await bot.get_sticker_set(name=sticker_pack_name)
        await callback.message.answer_sticker(sticker=sticker_pack.stickers[0].file_id)

        user.data.clear()
        await user.asave()

        text_done = await Text.objects.aget(name='–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞')
        text_share = await Text.objects.aget(name='–ö–Ω–æ–ø–∫–∞ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è')
        text_again = await Text.objects.aget(name='–ö–Ω–æ–ø–∫–∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ')

        await callback.message.answer(
            text=text_done.text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=text_again.text, callback_data='menu')],
                    [
                        InlineKeyboardButton(
                            text=text_share.text,
                            url=f'https://t.me/share/url?url=https://t.me/Yandexkids_Stickers_bot&'
                                f'text={quote("–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –¥–ª—è –≤–∞—Å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å –≤–∞—à–∏–º —Ä–µ–±–µ–Ω–∫–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ!")}'
                        )
                    ]
                ]
            )
        )
        return

    user.data['current_n'] += 1
    await user.asave()

    callback = CallbackQuery(
        data=user.data['current_template'],
        message=callback.message,
        inline_message_id=None,
        chat_instance=callback.chat_instance,
        id=callback.id,
        from_user=callback.from_user,
    )

    await on_template_stickers(callback, user, bot)


@router.callback_query(F.data == 'disagree')
async def disagree(callback: CallbackQuery, user: User, bot: Bot):
    await callback.message.delete()


@router.callback_query(F.data == 'my')
async def my(callback: CallbackQuery, user: User, bot: Bot):
    text = await Text.objects.aget(name='–¢–µ–∫—Å—Ç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ (–∫–∞—Å—Ç–æ–º)')
    text_back = await Text.objects.aget(name='–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    msg = await callback.message.answer(
        text=text.text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=text_back.text, callback_data='back')]]
        )
    )

    if 'current_n' not in user.data:
        user.data['current_n'] = 1

    user.data['current_template'] = 'my'
    user.data['message_ids'] = [msg.message_id]
    user.data['state'] = 'text'
    await user.asave()


@router.callback_query(F.data == 'agree_my')
async def my_agree(callback: CallbackQuery, user: User, bot: Bot):
    await bot.delete_messages(chat_id=callback.message.chat.id, message_ids=user.data['message_ids'])

    if 'sticker_file_ids' in user.data:
        user.data['sticker_file_ids'].append(callback.message.sticker.file_id)
    else:
        user.data['sticker_file_ids'] = [callback.message.sticker.file_id]

    user.data['current_n'] += 1
    await user.asave()

    await my(callback, user, bot)


@router.message(F.text)
async def on_text(message: Message, user: User, bot: Bot):
    await bot.delete_messages(chat_id=message.chat.id, message_ids=user.data['message_ids'] + [message.message_id])

    if user.data['state'] != 'text':
        return

    text_error = await Text.objects.aget(name='–û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ (–∫–∞—Å—Ç–æ–º)')
    if len(message.text) > 50:
        await message.answer(
            text=text_error.text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='disagree')]]
            )
        )
        return

    text = await Text.objects.aget(name='–¢–µ–∫—Å—Ç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ (–∫–∞—Å—Ç–æ–º)')
    text_back = await Text.objects.aget(name='–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    msg = await message.answer(
        text=text.text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=text_back.text, callback_data='back')]]
        )
    )

    user.data['message_ids'] = [msg.message_id]
    user.data['text'] = message.text.upper()
    await user.asave()


async def on_my_photo(message: Message, user: User, bot: Bot):
    await bot.delete_messages(chat_id=message.chat.id, message_ids=user.data['message_ids'] + [message.message_id])

    image = Image.open(
        await bot.download(file=message.document.file_id if message.document else message.photo[-1].file_id)
    )

    result = Image.new('RGBA', (512, 512), (255, 255, 255, 0))

    points = ((0, 0), (512, 400))
    width, height = points[1][0] - points[0][0], points[1][1] - points[0][1]

    if image.height / image.width > height / width:
        image = image.resize((width, int(image.height / image.width * width)))
    else:
        image = image.resize((int(image.width / image.height * height), height))

    white_line = Image.new('RGB', (512, 512), (255, 255, 255))
    draw = ImageDraw.Draw(white_line)
    image = remove(image)

    texts = ['']

    for t in user.data['text'].split():
        if len(texts[-1]) + len(t) + 1 > 25:
            texts[-1] = texts[-1].strip()
            texts.append(t)
            continue

        texts[-1] += f' {t}'

    for i, t in enumerate(texts):
        draw.text((10, 50 * i), text=t, fill=(0, 0, 0), font=config.font)

    result.paste(image)
    result.paste(white_line, (0, 400))

    result_byte_arr = BytesIO()
    result.save(result_byte_arr, format='PNG')
    result_byte_arr.seek(0)

    text_ok = await Text.objects.aget(name='–î–µ–ª–∞–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ (–ö–Ω–æ–ø–∫–∞ –û—Å—Ç–∞–≤–ª—è–µ–º)')
    text_again = await Text.objects.aget(name='–ö–Ω–æ–ø–∫–∞ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä (–∫–∞—Å—Ç–æ–º)')
    text_stop = await Text.objects.aget(name='–ö–Ω–æ–ø–∫–∞ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ (–∫–∞—Å—Ç–æ–º)')
    text_back = await Text.objects.aget(name='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')

    msg = await message.answer_sticker(
        sticker=BufferedInputFile(file=result_byte_arr.read(), filename='result.png'),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=text_ok.text, callback_data='agree_my')],
                [InlineKeyboardButton(text=text_again.text, callback_data='disagree_my')],
                [InlineKeyboardButton(text=text_stop.text, callback_data='stop_my')],
                [InlineKeyboardButton(text=text_back.text, callback_data='back')]
            ]
        )
    )

    user.data['message_ids'].append(msg.message_id)

    await user.asave()


@router.callback_query(F.data == 'disagree_my')
async def disagree_my(callback_query: CallbackQuery, user: User, bot: Bot):
    await bot.delete_messages(
        chat_id=callback_query.message.chat.id,
        message_ids=user.data['message_ids'] + [callback_query.message.message_id]
    )

    await my(callback_query, user, bot)


@router.callback_query(F.data == 'stop_my')
async def stop_my(callback: CallbackQuery, user: User, bot: Bot):
    if 'sticker_file_ids' in user.data:
        user.data['sticker_file_ids'].append(callback.message.sticker.file_id)
    else:
        user.data['sticker_file_ids'] = [callback.message.sticker.file_id]

    await bot.delete_messages(
        chat_id=callback.message.chat.id,
        message_ids=user.data['message_ids'] + [callback.message.message_id]
    )

    sticker_pack_name = f's{str(uuid.uuid4()).replace('-', '0')}_by_{(await bot.get_me()).username}'

    await bot.create_new_sticker_set(
        user_id=user.id,
        name=sticker_pack_name,
        title='–ú–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫',
        stickers=[
            InputSticker(sticker=file_id, emoji_list=['üåû'], format=StickerFormat.STATIC)
            for file_id in user.data['sticker_file_ids']
        ],
        sticker_type=StickerType.REGULAR,
        sticker_format=StickerFormat.STATIC
    )

    sticker_pack = await bot.get_sticker_set(name=sticker_pack_name)
    await callback.message.answer_sticker(sticker=sticker_pack.stickers[0].file_id)

    user.data.clear()
    await user.asave()

    text_done = await Text.objects.aget(name='–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞')
    text_share = await Text.objects.aget(name='–ö–Ω–æ–ø–∫–∞ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è')
    text_again = await Text.objects.aget(name='–ö–Ω–æ–ø–∫–∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ')

    await callback.message.answer(
        text=text_done.text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=text_again.text, callback_data='menu')],
                [
                    InlineKeyboardButton(
                        text=text_share.text,
                        url=f'https://t.me/share/url?url=https://t.me/Yandexkids_Stickers_bot&'
                            f'text={quote("–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –¥–ª—è –≤–∞—Å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å –≤–∞—à–∏–º —Ä–µ–±–µ–Ω–∫–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ!")}'
                    )
                ]
            ]
        )
    )

    s = await Statistic.objects.aget(name='–°—Ç–∏–∫–µ—Ä–æ–≤ –ö–∞—Å—Ç–æ–º–Ω—ã—Ö')
    s.value += 1
    await s.asave()

    s = await Statistic.objects.aget(name='–°—Ç–∏–∫–µ—Ä–æ–≤ –í—Å–µ–≥–æ')
    s.value += 1
    await s.asave()


@router.startup()
async def on_startup():
    from bot import texts
    await texts.setup_texts()
    await Statistic.setup()
